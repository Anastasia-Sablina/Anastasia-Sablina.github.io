[{"title":"博客配置简述","date":"2022-03-01T11:57:06.000Z","url":"/Blog-basic/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E7%AE%80%E8%BF%B0.html","categories":[["Blog basic","/categories/Blog-basic/"]],"content":" test About how to set up another environment Preparation nodejs (cnpm) git hexo init 1 Create a folder 2 cd folder, hexo init 3 move source, themes, scaffolds into the folder 4 install packages: hexo-renderer-pandoc pandoc hexo-filter-mathjax hexo-asset-image "},{"title":"test","date":"2022-03-01T11:44:03.000Z","url":"/uncategorized/test.html","categories":[["undefined",""]]},{"title":"Hello World","date":"2022-03-01T02:21:09.704Z","url":"/uncategorized/hello-world.html","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"},{"title":"极简卡尔曼滤波轨迹预测","date":"2022-01-16T09:29:37.000Z","url":"/Robomaster/Computer-Vision/%E6%9E%81%E7%AE%80%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2%E8%BD%A8%E8%BF%B9%E9%A2%84%E6%B5%8B.html","tags":[["Robotics","/tags/Robotics/"],["Computer Vision","/tags/Computer-Vision/"]],"categories":[["Robomaster","/categories/Robomaster/"],["Computer Vision","/categories/Robomaster/Computer-Vision/"]],"content":"卡尔曼滤波概述物体的运动状态以及对此的测量可以用状态空间方程（参考现代控制理论）表达，此处我们使用离散状态空间方程： 以二维空间中运动为例，在（）中，为状态矩阵 为状态转移矩阵； 为控制矩阵，有输入时使用；为过程噪声，是中各项之误差的协方差矩阵 在（）中，为测量矩阵为测量矩阵 协方差矩阵简易说明 在卡尔曼滤波中，我们假设噪声均符合正态分布,即即协方差矩阵，同理设为过程噪声之方差，以此类推。 简易编程实现在OpenCV中有cv2.KalmanFilter可供调用，示例如下： dynamParams为状态维数，按概述中例子则为4 measureParams为测量维数，按概述中例子则为2 controlParams为控制矩阵维数 type决定所生成矩阵的数据类型，默认CV_32F"},{"title":"Learning_ROS:Service(python)","date":"2021-12-08T09:53:28.000Z","url":"/Learning-ROS/Learning-ROS-Service-python.html","tags":[["python","/tags/python/"],["Robotics","/tags/Robotics/"]],"categories":[["Learning_ROS","/categories/Learning-ROS/"]],"content":"Create Serviceserver.py Create Clientclient.py "},{"title":"Learning ROS:Topic(python)","date":"2021-12-08T09:30:41.000Z","url":"/Learning-ROS/Learning-ROS-Topic-python.html","tags":[["python","/tags/python/"],["Robotics","/tags/Robotics/"]],"categories":[["Learning_ROS","/categories/Learning-ROS/"]],"content":"Publisher Listener Modify CMakeLists.txt run .py file:"},{"title":"Learning ROS:Topic","date":"2021-12-07T00:01:12.000Z","url":"/Learning-ROS/Learning-ROS-Topic.html","tags":[["C++","/tags/C/"],["Robotics","/tags/Robotics/"]],"categories":[["Learning_ROS","/categories/Learning-ROS/"]],"content":"Introduction: Topic is a kind of open-loop control method, its structure is: Create a Publisher When will ros::ok()&#x3D;&#x3D;False ? Ctrl+C Meet a node with same name ros::shutdown() ros::NodeHandles are destroyed Create a subscriber Remember to edit CmakeLists.txt before compiling! Defining topicsMany topics can be found in the stack called common_msgs. The definition of topic will store as .msg in folder “msg”. The grammar is similar as C&#x2F;C++, but .msg can be used in multiple languages. example: Data type available: Primitive Type Serialization C++ Python2 Python3 bool (1) unsigned 8-bit int uint8_t (2) bool int8 signed 8-bit int int8_t int uint8 unsigned 8-bit int uint8_t int (3) int16 signed 16-bit int int16_t int uint16 unsigned 16-bit int uint16_t int int32 signed 32-bit int int32_t int uint32 unsigned 32-bit int uint32_t int int64 signed 64-bit int int64_t long int uint64 unsigned 64-bit int uint64_t long int float32 32-bit IEEE float float float float64 64-bit IEEE float double float string ascii string (4) std::string str bytes Modifying CMakeLists.txt: sth about int “argc” and “char **argv”IssuesRemember, if you use for loop to publish, .sleep() should be contained in the loop to control its periodicity!!!! 永远！不要！在他妈的.msg或.srv里用！分！号！（是哪个cyka用分号还debug半天不知道问题在这？是我(╬&#96;д´)9"},{"title":"Learning ROS:Service","date":"2021-12-06T23:58:38.000Z","url":"/Learning-ROS/Learning-ROS-Service.html","tags":[["C++","/tags/C/"],["Robotics","/tags/Robotics/"]],"categories":[["Learning_ROS","/categories/Learning-ROS/"]],"content":"Introduction: Topic is a kind of closed-loop control method, its structure is as below: Define your own topic.srvSimilar as defining a topic.msg() add.srv Create a serverserver.cpp Create a clientclient.cpp Modify CmakeLists.txt(A fu*king torture) Some special point about how to use it result: "},{"title":"cpp_memo","date":"2021-11-30T21:39:22.000Z","url":"/Learning-C/cpp-memo.html","tags":[["C++","/tags/C/"]],"categories":[["Learning_C++","/categories/Learning-C/"]],"content":"&#x2F;&#x2F;Based on C++ Primer Plus(6th Edition中文版) Chapter 3Number of bytes occupied by different data types: data types X86&#x2F;byte X64&#x2F;byte bool 1 1 char 1 1 short 2 2 int 4 4 long 4 4 long long 8 8 float 4 4 double 8 8 long double 8 8 pointers 4 8 Chapter 4Pointer basics: (new and delete?) Chapter 5About x++ and ++x : x++ first outputs original x, then do the addition, ++x first do the addition and outputs its result. This lead to Side Effect. Side effect: Changes occur when calculating expressions. In the case of pointers:**The operators on the right are processed first!!! ** C-style strings:C++ view C-style strings as addresses, so expression compares their addresses. To compare two strings, we should use strcmp(char1,char2) Using string is much simpler, since the variables can be directly compared: &#x2F;&#x2F;Range-based for in P152, discuss in Chap 8 and 16 &#x2F;&#x2F;I ‘ve skipped cin.get() in P153 Chapter 6DO NOT USE “:“ IN if&#x2F;else!!!A serious mistake: “AND” “OR” “NOT” AND OR NOT &amp;&amp; || ！ !can be directly used as “NOT”, eg: while(!interval)means getting values don’t belongs to interval &#x2F;&#x2F;skip &lt;ctype.h&gt; in P177 switch() and case:Demo: If there is no break, the program will run to the next line(eg: case &#39;a&#39;: will get the same output as case &#39;A&#39;) &#x2F;&#x2F;skip 6.7,6.8 P187"},{"title":"Learning_ROS:Basic Operations","date":"2021-11-29T09:05:32.000Z","url":"/Learning-ROS/learning-ROS.html","tags":[["C++","/tags/C/"],["Robotics","/tags/Robotics/"]],"categories":[["Learning_ROS","/categories/Learning-ROS/"]],"content":"BackgroundThe structure of ROS: Building packagesCreate a workspace Create a package Cheat Sheets! ᕕ( ᐛ )ᕗ Issues:“make[2]: 警告：检测到时钟错误。您的构建版本可能是不完整的”解决方案： "},{"title":"Exterior_Ballistics(For RMUA2022)","date":"2021-11-27T23:16:16.000Z","url":"/Robomaster/Exterior-Ballistics.html","tags":[["Robotics","/tags/Robotics/"]],"categories":[["Robomaster","/categories/Robomaster/"]],"content":"Introduction ​ ​ In this part, we will try to lock the enemy’s armor panel with yolo and obtain its world coordinate(and predict its linear and angular velocity if possible) and obtain our world coordinate(by SLAM? I don’t know, this is not my task #straightforward). By calculating the difference in coordinates we can get the Yaw’s rotating angle and publish it. Then by using Exterior Ballistics’ models we can obtain the pitch’s rotating angle. Here we will only talk about these rotations, methods of obtaining the coordinates will be discussed later. Yaw axis ​ Pitch axis some murmurs:Holy crap, I have to use Matlab and Simulink before learning linear algebra ( ´_ゝ`)"}]